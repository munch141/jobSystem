@page "/"

<PageTitle>Queue job</PageTitle>

@inject JobQueue JobQueue
@inherits OwningComponentBase

<h1>Job scheduling</h1>
<p>Jobs on queue: @jobCount</p>

@* <table class="table">
    <thead>
        <tr>
            <th>Worker</th>
            <th>Status</th>
        </tr>
    </thead>

    <tbody>
        @for (int i = 0; i < workers.Count(); i++)
        {
            <tr>
                <td>@(i+1)</td>
                <td>@workers.ElementAt(i).Status</td>
            </tr>
        }
    </tbody>
</table> *@

<button class="btn btn-primary" @onclick="AddJobAsync">Add a job</button>
@* <button class="btn btn-primary" @onclick="AddFailingJob">Add a failing job</button> *@

<table class="table">
    <thead>
        <tr>
            <th>Job</th>
            <th>Created at</th>
        </tr>
    </thead>

    <tbody>
        @for (int i = 0; i < jobs.Count; i++)
        {
            <tr>
                <td>@jobs[i].Name</td>
                <td>@jobs[i].CreatedAt.ToString("dd MMM yyyy")</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private long jobCount => jobs.Count;
    private List<Job> jobs = new List<Job>();

    protected override async Task OnInitializedAsync()
    {
        this.jobs = await JobQueue.ListAsync();
    }

    private async Task AddJobAsync()
    {
        var newJob = new Job(
            Guid.NewGuid(),
            $"Job {this.jobCount + 1}",
            DateTime.Now
        );

        await JobQueue.EnqueueAsync(newJob);
        this.jobs = await JobQueue.ListAsync();
    }
}
