@page "/"
@using Microsoft.AspNetCore.SignalR.Client

@inject JobQueue JobQueue
@inject ILogger<Index> logger
@inject IHostEnvironment HostEnvironment
@inject IJSRuntime JsRuntime
@inherits OwningComponentBase
@implements IAsyncDisposable

<h1>Job scheduling</h1>
<p>Jobs on queue: @jobCount</p>

<button class="btn btn-primary" @onclick="AddJobAsync">Add a job</button>

<table class="table">
    <thead>
        <tr>
            <th>Job</th>
            <th>Created at</th>
        </tr>
    </thead>

    <tbody>
        @for (int i = 0; i < jobs.Count; i++)
        {
            <tr>
                <td>@jobs[i].Name</td>
                <td>@jobs[i].CreatedAt.ToString("dd MMM yyyy")</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private long jobCount => jobs.Count;
    private List<Job> jobs = new List<Job>();
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        this.hubConnection = new HubConnectionBuilder()
            .WithUrl(
                "https://webapp/jobStatusHub",
                conf => {
                    if (HostEnvironment.IsDevelopment()) {
                        conf.HttpMessageHandlerFactory = (_) => new HttpClientHandler
                        {
                            ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator
                        };
                    }
                }
            )
            .Build();

        hubConnection.On<string, string>("JobStatusUpdate", async (jobId, status) =>
        {
            await this.JsRuntime.InvokeVoidAsync("console.log", $"Status update: {jobId} {status}");
        });

        await hubConnection.StartAsync();

        JobQueue.QueueUpdated += this.UpdateListAsync;

        this.jobs = await JobQueue.ListAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }

        JobQueue.QueueUpdated -= this.UpdateListAsync;
    }

    private async Task AddJobAsync()
    {
        var newJob = new Job(
            Guid.NewGuid(),
            $"Job {this.jobCount + 1}",
            DateTime.Now
        );

        await JobQueue.EnqueueAsync(newJob);
    }

    private async void UpdateListAsync(object? sender, EventArgs e)
    {
        this.jobs = await JobQueue.ListAsync();
        await InvokeAsync(StateHasChanged);
    }
}
